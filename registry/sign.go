package registry

import (
	"path"

	"github.com/coreos/fleet/sign"
)

const (
	signingPrefix = "/signing/"
)

func (r *Registry) CreateSignatureSet(s *sign.SignatureSet) error {
	key := path.Join(keyPrefix, signingPrefix, s.Tag)
	json, _ := marshal(s)
	_, err := r.etcd.Create(key, json, 0)
	if err != nil {
		return err
	}
	return err
}

func (r *Registry) DestroySignatureSet(tag string) {
	key := path.Join(keyPrefix, signingPrefix, tag)
	r.etcd.Delete(key, false)
}

func (r *Registry) GetSignatureSet(tag string) *sign.SignatureSet {
	key := path.Join(keyPrefix, signingPrefix, tag)
	resp, err := r.etcd.Get(key, false, true)

	// Assume the error was KeyNotFound and return an empty data structure
	if err != nil {
		return nil
	}

	var sig sign.SignatureSet
	//TODO: Handle the error generated by unmarshal
	unmarshal(resp.Node.Value, &sig)

	return &sig
}

func (r *Registry) DestroySignatureSetOfPayload(name string) {
	r.DestroySignatureSet(sign.TagForPayload(name))
}

func (r *Registry) GetSignatureSetOfPayload(name string) *sign.SignatureSet {
	return r.GetSignatureSet(sign.TagForPayload(name))
}
