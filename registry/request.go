package registry

import (
	"fmt"
	"path"
	"time"

	"github.com/coreos/go-etcd/etcd"
	log "github.com/golang/glog"

	"github.com/coreos/coreinit/event"
	"github.com/coreos/coreinit/job"
	"github.com/coreos/coreinit/machine"
)

// Submit a new JobRequest to coreinit
func (r *Registry) AddRequest(req *job.JobRequest) {
	key := path.Join(keyPrefix, requestPrefix, req.ID.String())
	//TODO: Handle the error generated by marshal
	json, _ := marshal(req)
	r.etcd.Set(key, json, 0)
}

// Remove a given JobRequest from coreinit
func (r *Registry) ResolveRequest(req *job.JobRequest) {
	key := path.Join(keyPrefix, requestPrefix, req.ID.String())
	r.etcd.Delete(key, true)
}

func (r *Registry) ClaimRequest(request *job.JobRequest, m *machine.Machine, ttl time.Duration) bool {
	return r.acquireLeadership(fmt.Sprintf("req-%s", request.ID.String()), m.BootId, ttl)
}

func filterEventRequestCreated(resp *etcd.Response) *event.Event {
	if resp.Action != "set" {
		return nil
	}

	var request job.JobRequest
	if err := unmarshal(resp.Node.Value, &request); err != nil {
		log.V(1).Infof("Failed to deserialize JobRequest: %s", err)
		return nil
	}

	return &event.Event{"EventRequestCreated", request, nil}
}
